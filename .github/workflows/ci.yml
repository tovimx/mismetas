# Name of our workflow
name: Continuous Integration

# Define when this workflow will run
on:
  # Trigger on push events to main branch
  push:
    branches: [ main ]
  # Trigger on pull requests to main branch
  pull_request:
    branches: [ main ]

# Define environment variables available to all jobs
env:
  # Test database URL - only for CI environment
  TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/mismetas

# Jobs are a set of steps that execute on the same runner
jobs:
  # Our test job
  test:
    # Define the type of machine to run on
    runs-on: ubuntu-latest
    
    # Service containers to run with this job
    services:
      # We need PostgreSQL for our tests
      postgres:
        # Using the same version as our development environment
        image: postgres:15
        # Environment variables for PostgreSQL
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mismetas
        # Expose port 5432 to the runner
        ports:
          - 5432:5432
        # Health check to ensure PostgreSQL is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps represent a sequence of tasks
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci # Clean install - uses package-lock.json

      # Step 4: Generate Prisma Client
      - name: Generate Prisma Client
        run: npx prisma generate

      # Step 5: Run database migrations
      - name: Run database migrations
        run: npx prisma db push
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}

      # Step 6: Run tests
      - name: Run tests
        run: npm test -- --ci --passWithNoTests
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
          NODE_ENV: test
          AUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000
          GOOGLE_CLIENT_ID: test-google-client-id
          GOOGLE_CLIENT_SECRET: test-google-client-secret
          # Add dummy API keys for tests (they won't be called in unit tests)
          GOOGLE_AI_API_KEY: test-google-ai-key
          ANTHROPIC_API_KEY: test-anthropic-key

      # Step 7: Run linting
      - name: Run linting
        run: npm run lint

  # Build job to ensure the app builds correctly
  build:
    needs: test # Only build if tests pass
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          # Use dummy values for build since we don't need real connections
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          AUTH_SECRET: build-secret
          NEXTAUTH_URL: http://localhost:3000
          GOOGLE_CLIENT_ID: dummy-google-client-id
          GOOGLE_CLIENT_SECRET: dummy-google-client-secret
          GOOGLE_AI_API_KEY: dummy-google-ai-key
          ANTHROPIC_API_KEY: dummy-anthropic-key